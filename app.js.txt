/* app.js
   Controls navigation, per-slide data binding, preview, PDF generation, APK download demo.
   Save this as app.js in same folder as index.html and style.css
*/

/* ============ Utility helpers ============ */
const $ = s => document.querySelector(s);
const $$ = s => Array.from(document.querySelectorAll(s));

/* State */
const slidesWrap = $('#slides');
const slides = $$('.slide');
const TOTAL = slides.length;
let idx = 0;

// Data draft stored in localStorage under key 'wizard_v3'
let DRAFT = {
  appName: '',
  developer: '',
  packageId: '',
  category: 'Education',
  contentRating: 'Rated for 3+',
  shortDesc: '',
  longDesc: '',
  lottieChoice: 'none',
  gifChoice: 'none',
  screenshots: [],
  email: '',
  pricing: 'free',
  price: '',
  icon: null,
  terms: false,
  footer: '',
  website: '',
  accent: '#2b7de9',
  coupon: '',
  notes: ''
};

const STORAGE_KEY = 'wizard_v3';

/* ============ Load draft if any ============ */
function loadDraft() {
  try {
    const raw = localStorage.getItem(STORAGE_KEY);
    if (!raw) return;
    const parsed = JSON.parse(raw);
    Object.assign(DRAFT, parsed);
    // ensure array
    if (!Array.isArray(DRAFT.screenshots)) DRAFT.screenshots = [];
  } catch(e) {
    console.warn('Failed to load draft', e);
  }
}
function persistDraft() {
  const payload = Object.assign({}, DRAFT);
  try {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(payload));
  } catch(e){
    console.warn('Persist failed', e);
  }
}

/* ============ UI updates ============ */
function updateProgress() {
  const pct = Math.round(((idx+1)/TOTAL) * 100);
  $('#progress').style.width = pct + '%';
  $('#stepInfo').textContent = `Step ${idx+1} / ${TOTAL}`;
}

function goTo(i) {
  i = Math.max(0, Math.min(TOTAL-1, i));
  const prev = idx;
  if (prev === i) return;
  // animation classes for prev
  slides[prev].querySelectorAll('*').forEach(n => n.classList.add('leave'));
  setTimeout(() => {
    slides[prev].querySelectorAll('*').forEach(n => n.classList.remove('leave'));
  }, 200);

  // move
  slidesWrap.style.transform = `translateX(-${i * 100}%)`;
  slides[i].querySelectorAll('*').forEach(n => n.classList.add('enter'));
  setTimeout(()=> slides[i].querySelectorAll('*').forEach(n => n.classList.remove('enter')), 650);
  idx = i;
  updateProgress();
  // update next/prev button states
  $('#btnPrev').disabled = idx === 0;
  $('#btnNext').textContent = idx === TOTAL-1 ? 'Finish' : 'Next →';
}

/* ============ Navigation wiring ============ */
$('#btnNext').addEventListener('click', ()=> {
  // if last slide and generate button present, trigger
  if (idx >= TOTAL-1) {
    const gen = $('#btnGenerate');
    if (gen) gen.click();
    return;
  }
  goTo(idx + 1);
});
$('#btnPrev').addEventListener('click', ()=> goTo(idx - 1));

// keyboard and swipe
document.addEventListener('keydown', e => {
  if (e.key === 'ArrowRight') goTo(idx + 1);
  if (e.key === 'ArrowLeft') goTo(idx - 1);
  if (e.key === 'Enter') {
    // only proceed when focus inside an input or textarea
    const active = document.activeElement;
    if (active && (active.tagName === 'INPUT' || active.tagName === 'TEXTAREA' || active.tagName === 'SELECT')) {
      if (idx === TOTAL-1) { $('#btnGenerate').click(); } else { goTo(idx + 1); }
    }
  }
});

// Hammer for mobile swipe if available
(function setupSwipe(){
  const stage = document.getElementById('stage');
  if (window.Hammer) {
    const mc = new Hammer(stage);
    mc.on('swipeleft', ()=> goTo(idx + 1));
    mc.on('swiperight', ()=> goTo(idx - 1));
  } else {
    // pointer fallback
    let sx = null;
    stage.addEventListener('pointerdown', e => sx = e.clientX);
    stage.addEventListener('pointerup', e => {
      if (sx === null) return;
      const dx = e.clientX - sx;
      if (dx < -80) goTo(idx + 1);
      if (dx > 80) goTo(idx - 1);
      sx = null;
    });
  }
})();

/* ============ Form wiring: map fields to DRAFT and preview ============ */
function qs(id) { return document.getElementById(id); }

// helper: simple setter to avoid repetitiveness
function bindInput(elId, key) {
  const el = qs(elId);
  if (!el) return;
  // initial hydration
  if (DRAFT[key] !== undefined && DRAFT[key] !== null) {
    if (el.type === 'checkbox') el.checked = DRAFT[key];
    else el.value = DRAFT[key];
  }
  el.addEventListener('input', (ev) => {
    if (el.type === 'checkbox') DRAFT[key] = el.checked;
    else DRAFT[key] = el.value;
    persistDraft();
    hydratePreview();
  });
  el.addEventListener('change', ()=> {
    if (el.type === 'checkbox') DRAFT[key] = el.checked;
    else DRAFT[key] = el.value;
    persistDraft();
    hydratePreview();
  });
}

// Bind most fields
bindInput('f_appName','appName');
bindInput('f_developer','developer');
bindInput('f_packageId','packageId');
bindInput('f_category','category');
bindInput('f_contentRating','contentRating');
bindInput('f_shortDesc','shortDesc');
bindInput('f_longDesc','longDesc');
bindInput('f_lottieChoice','lottieChoice');
bindInput('f_gifChoice','gifChoice');
bindInput('f_email','email');
bindInput('f_pricing','pricing');
bindInput('f_price','price');
bindInput('f_footer','footer');
bindInput('f_website','website');
bindInput('f_accent','accent');
bindInput('f_coupon','coupon');
bindInput('f_notes','notes');
bindInput('f_terms','terms'); // checkbox

// Show/hide price field
qs('f_pricing').addEventListener('change', ()=> {
  if (qs('f_pricing').value === 'paid') qs('f_price').style.display = 'block';
  else qs('f_price').style.display = 'none';
});

/* ============ File uploads: icon & screenshots ============ */
// Icon
qs('f_icon').addEventListener('change', async (e) => {
  const f = e.target.files && e.target.files[0];
  if (!f) return;
  const d = await fileToDataURL(f);
  DRAFT.icon = d;
  persistDraft();
  hydratePreview();
});

// screenshots multiple
qs('f_screens').addEventListener('change', async (e) => {
  const files = Array.from(e.target.files || []);
  for (let i=0;i<files.length && DRAFT.screenshots.length < 4;i++){
    try {
      const d = await fileToDataURL(files[i]);
      DRAFT.screenshots.push(d);
      addThumb(d);
    } catch(err){ console.warn(err); }
  }
  persistDraft();
  hydratePreview();
});

function addThumb(dataUrl) {
  const container = qs('thumbs');
  const wrapper = document.createElement('div');
  wrapper.style.position = 'relative';
  wrapper.style.width = '84px';
  wrapper.style.height = '120px';
  wrapper.style.borderRadius = '8px';
  wrapper.style.overflow = 'hidden';
  wrapper.style.marginRight = '8px';
  wrapper.style.border = '1px solid rgba(255,255,255,0.04)';
  wrapper.innerHTML = `<img src="${dataUrl}" style="width:100%;height:100%;object-fit:cover"/><button title="Remove" style="position:absolute;right:6px;top:6px;background:rgba(0,0,0,0.5);border:none;color:white;border-radius:6px;padding:4px;cursor:pointer">✕</button>`;
  const btn = wrapper.querySelector('button');
  btn.addEventListener('click', ()=> {
    const arr = Array.from(container.children);
    const idx = arr.indexOf(wrapper);
    if (idx >= 0) DRAFT.screenshots.splice(idx,1);
    wrapper.remove();
    persistDraft();
    hydratePreview();
  });
  container.appendChild(wrapper);
}

/* read file to dataURL */
function fileToDataURL(file){
  return new Promise((res, rej)=>{
    const r = new FileReader();
    r.onload = ()=> res(r.result);
    r.onerror = rej;
    r.readAsDataURL(file);
  });
}

/* ============ Hydrate preview panel from DRAFT ============ */
function hydratePreview(){
  qs('previewTitle').textContent = DRAFT.appName || 'App Title';
  qs('previewMeta').textContent = `${DRAFT.developer || 'Developer'} • ${DRAFT.packageId || 'package.id'} • ${DRAFT.contentRating || ''}`;
  qs('previewShort').textContent = DRAFT.shortDesc || DRAFT.longDesc || 'Short description will appear here.';
  // icon: if provided use image, else use lottie choice or initials
  const iconEl = qs('previewIcon');
  if (DRAFT.icon) {
    iconEl.style.backgroundImage = `url(${DRAFT.icon})`;
    iconEl.style.backgroundSize = 'cover';
    iconEl.textContent = '';
  } else if (DRAFT.lottieChoice && DRAFT.lottieChoice !== 'none') {
    iconEl.innerHTML = '';
    const player = document.createElement('lottie-player');
    player.src = DRAFT.lottieChoice;
    player.setAttribute('background','transparent');
    player.setAttribute('speed','1');
    player.setAttribute('loop','');
    player.setAttribute('autoplay','');
    player.style.width = '100%';
    player.style.height = '100%';
    iconEl.appendChild(player);
    iconEl.style.backgroundImage = 'none';
  } else {
    iconEl.innerHTML = '';
    iconEl.style.backgroundImage = 'none';
    iconEl.textContent = (DRAFT.appName || 'A').slice(0,2).toUpperCase();
  }

  // left sticker update (gifChoice)
  const stickerImgs = qs('#leftStickers').querySelectorAll('.sticker img');
  if (stickerImgs && stickerImgs[0]) {
    const gif = DRAFT.gifChoice || qs('f_gifChoice').value || 'none';
